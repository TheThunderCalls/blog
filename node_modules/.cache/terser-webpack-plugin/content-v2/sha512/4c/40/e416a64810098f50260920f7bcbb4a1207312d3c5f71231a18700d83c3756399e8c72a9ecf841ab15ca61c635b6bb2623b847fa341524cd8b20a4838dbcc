{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{286:function(a,t,s){\"use strict\";s.r(t);var r=s(14),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"java基础\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java基础\"}},[a._v(\"#\")]),a._v(\" Java基础\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"操作符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#操作符\"}},[a._v(\"#\")]),a._v(\" 操作符\")]),a._v(\" \"),t(\"p\",[a._v(\"在最底层，Java的数据通过使用操作符来操作的。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"分类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分类\"}},[a._v(\"#\")]),a._v(\" 分类\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"赋值\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#赋值\"}},[a._v(\"#\")]),a._v(\" 赋值\")]),a._v(\" \"),t(\"p\",[a._v('赋值使用操作符\"=\"。表示取符号右边的值，把它复制到左边。右值可以使任何常数、变量或者表达式(只要能生成一个值就行了)。但左值必须是一个明确的、已命名的变量。【常数不能作为左值】')]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"对于基本数据类型的赋值是很简单的。基本类型存储了实际的数值，而非指向一个对象的引用，所以在为其赋值的时候，是直接将一个地方的内容复制到了另一个地方。例如，对基本数据类型使用a=b复制，则b变量的值赋值给了a。如果修改a，b是不会受影响的\")]),a._v(\" \"),t(\"li\",[a._v('但对一个对象进行操作时，真正操作的是该对象的引用，即：如果将一个对象赋值给另一个对象，实际上是将\"引用\"从一个地方复制到另一个地方。此时修改被赋值对象的属性值时，源对象的该属性值也会改变')])]),a._v(\" \"),t(\"h4\",{attrs:{id:\"算术操作符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#算术操作符\"}},[a._v(\"#\")]),a._v(\" 算术操作符\")]),a._v(\" \"),t(\"p\",[a._v(\"Java的基本算术操作符与其他大多数程序设计语言是相同的。其中包括加号(+)、减号(-)、除号(/)、乘号(*)以及取模操作符(%)。整数的除法会直接去掉结果的小数位(去尾法)，而非四舍五入\")]),a._v(\" \"),t(\"h5\",{attrs:{id:\"\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[a._v(\"#\")]),a._v(\" +\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"自动递增-和递减\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自动递增-和递减\"}},[a._v(\"#\")]),a._v(\" 自动递增(++)和递减(--)\")]),a._v(\" \"),t(\"h5\",{attrs:{id:\"a-和-a\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#a-和-a\"}},[a._v(\"#\")]),a._v(\" ++a 和 a++\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"关系操作符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关系操作符\"}},[a._v(\"#\")]),a._v(\" 关系操作符\")]),a._v(\" \"),t(\"p\",[a._v(\"关系操作符生成的是一个boolean结果，计算的是操作数的值之间的关系。\")]),a._v(\" \"),t(\"h5\",{attrs:{id:\"-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#-2\"}},[a._v(\"#\")]),a._v(\" ==\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"逻辑操作符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#逻辑操作符\"}},[a._v(\"#\")]),a._v(\" 逻辑操作符\")]),a._v(\" \"),t(\"p\",[a._v(\"与(&&)、或(||)、非(!) 能根据逻辑的参数关系，生成一个布尔值(true或false)\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"按位操作符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#按位操作符\"}},[a._v(\"#\")]),a._v(\" 按位操作符\")]),a._v(\" \"),t(\"p\",[a._v(\"是用来操作整数基本数据类型中的单个比特，即二进制位。按位操作符会对两个参数中对应的位执行布尔代数运算，并最终生成一个结果\")]),a._v(\" \"),t(\"p\",[a._v(\"与(&)：只有两个输入位都为1时，结果才为1；否则全为0\")]),a._v(\" \"),t(\"p\",[a._v(\"或(|)：只要两个输入位中有一个为1，结果就为1；当两个输入位全为0的时候结果才为0\")]),a._v(\" \"),t(\"p\",[a._v(\"异或(^)：当两个输入位一个为1，另一个为0时，结果才为1,；否则为0\")]),a._v(\" \"),t(\"p\",[a._v(\"非(!)：属于一元操作符，只对一个操作数进行操作。输入与输出位是相反的值\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"位移操作符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#位移操作符\"}},[a._v(\"#\")]),a._v(\" 位移操作符\")]),a._v(\" \"),t(\"p\",[a._v(\"只可用来处理整数类型\")]),a._v(\" \"),t(\"p\",[a._v(\"左位移操作符(<<)能按照操作符右侧指定的位数将操作符左边的操作数向左移动(低位补0)，相当于 * (2^n)\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"控制流\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#控制流\"}},[a._v(\"#\")]),a._v(\" 控制流\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"面向对象\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向对象\"}},[a._v(\"#\")]),a._v(\" 面向对象\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"异常\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常\"}},[a._v(\"#\")]),a._v(\" 异常\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"泛型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型\"}},[a._v(\"#\")]),a._v(\" 泛型\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"注解\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注解\"}},[a._v(\"#\")]),a._v(\" 注解\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"反射\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射\"}},[a._v(\"#\")]),a._v(\" 反射\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"数组\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组\"}},[a._v(\"#\")]),a._v(\" 数组\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"代码校验\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码校验\"}},[a._v(\"#\")]),a._v(\" 代码校验\")])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}